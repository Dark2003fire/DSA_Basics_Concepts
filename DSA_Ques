/*
Q1)
Implement a bst library(btree.h)with operations - create ,search , insert , inorder ,
 preorder , postorder.write a menu driven program that performs the above opeartions.
*/

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
struct tree {
	int data;
	struct tree *left;
	struct tree *right;
};

struct tree *insert(struct tree *,int);
void inorder(struct tree *);
void postorder(struct tree *);
void preorder(struct tree *);
struct tree *search(struct tree *);


int main() {
	struct tree *root;
	int choice, item,item_no;
	root = NULL;
	
	
	do {
		do {
			printf("\n \t 1. Insert in Binary Tree  ");
			printf("\n\t 2. Inorder traversal of Binary tree");
			printf("\n\t 3. Postorder traversal of Binary tree");
			printf("\n\t 4. Preorder traversal of Binary tree");
			printf("\n\t 5. Search and replace ");
			printf("\n\t 6. Exit ");
			printf("\n\t Enter choice : ");
			scanf(" %d",&choice);
			if(choice<1 || choice>6)
			      printf("\n Invalid choice - try again");
		}
		while (choice<1 || choice>6);
		switch(choice) {
			case 1:
			    printf("\n Enter new element: ");
			    scanf("%d", &item);
			root= insert(root,item);
			printf("\n root is %d",root->data);
			printf("\n Inorder traversal of binary tree is : ");
			inorder(root);
			break;
		
			case 2:
			    printf("\n Inorder traversal of binary tree is : ");
			inorder(root);
			break;
			
			case 3:
				printf("\n Postorder traversal of binary tree is : ");
			postorder(root);
			break;
			
			case 4:
				  printf("\n Preorder traversal of binary tree is : ");
			preorder(root);
			break;
			
			case 5:
				  printf("\n Search and replace operation in binary tree ");
			root=search(root);
			break;
			
			default:
				   printf("\n End of program ");
		}
		/* end of switch */
	}
	while(choice !=6);
	return(0);
}

struct tree *insert(struct tree *root, int x) {
	if(!root) {
		root=(struct tree*)malloc(sizeof(struct tree));
		root->data = x;
		root->left = NULL;
		root->right = NULL;
		return(root);
	}
	if(root->data > x)
	     root->left = insert(root->left,x); 
		else {
		   if(root->data < x)
			root->right = insert(root->right,x);
	}
	return(root);
}

void inorder(struct tree *root) {
	if(root != NULL) {
		inorder(root->left);
		printf(" %d",root->data);
		inorder(root->right);
	}
	return;
}

void postorder(struct tree *root) {
	if(root != NULL) {
		postorder(root->left);
		postorder(root->right);
		printf(" %d",root->data);
	}
	return;
}

void preorder(struct tree *root) {
	if(root != NULL) {
		printf(" %d",root->data);
		preorder(root->left);
		preorder(root->right);
	}
	return;
}


struct tree *search(struct tree *root) {
	int no,i,ino;
	struct tree *ptr;
	ptr=root;
	printf("\n Enter the element to be searched :");
	scanf(" %d",&no);
	fflush(stdin);
	while(ptr) {
		if(no>ptr->data)
		     ptr=ptr->right; else if(no<ptr->data)
		     ptr=ptr->left; else
		     break;
	}
	if(ptr) {
		printf("\n Element %d which was searched is found and is = %d",no,ptr->data);
		printf("\n Do you want replace it, press 1 for yes : ");
		scanf(" %d",&i);
		if(i==1) {
			printf("\n Enter new element :");
			scanf(" %d",&ino);
			ptr->data=ino;
		} else
		    printf("\n\t It's okay");
	} else
	   printf("\n Element %d does not exist in the binary tree",no);
	return(root);
}


/*
Q2)

Write a C program that accepts the vertices and edges of a graph and store it as an 
Adjacency matrix . Implement functions to print the indegree , Outdegree and Total 
degree of all the vertices of a graph;


*/

#include<stdio.h>
#include<conio.h>
 
void rdfs(int m[10][10],int n,int v)
{
    int w;
    static int visit[20]={0};
 
    visit[v]=1;
    printf("\nv[%d]",v+1);
    for(w=0;w<n;w++)
    {
        if((visit[w] == 0))
        {
           printf("\t");
           rdfs(m,n,w);
        }
    }
}
 
struct queue
{
    int data[20];
    int front,rear;
}q;
 
void add(struct queue *pq,int n)
{
    pq->rear++;
    pq->data[pq->rear]=n;
}
 
int del(struct queue *pq)
{
    pq->front++;
    return (pq->data[pq->front]);
}
 
void initq(struct queue *pq)
{
    pq->front=pq->rear=-1;
}
 
int isempty(struct queue *pq)
{
    return (pq->rear==pq->front);
}
 
void rbfs(int m[10][10],int n)
{
    int i,j,v=0,w=0;
    int visit[20]={0};
 
    initq(&q);
    printf("\nThe BFS of first traversal is:\n");
    v=0;
    visit[v]=1;
    add(&q,v);
    while(!isempty(&q))
    {
        v=del(&q);
        printf("\nv[%d]\t",v+1);
        for(w=0;w<n;w++)
        {
            if((m[v][w] == 1) && (visit[w] == 0))
            {
                add(&q,w);
                visit[v]=1;
            }
        }
    }
    printf("\n");
}
 
 
int  main()
{
    int i,j,n,m[10][10],ind,outd,total,v=0;
    void rbfs(int m[10][10],int n);
 
    printf("\nEnter no. of vertex in graph:");
    scanf("%d",&n);
    printf("\nEnter adjacency matrix:");
    for(i=0;i<n;i++)
    for(j=0;j<n;j++)
        scanf("%d",&m[i][j]);
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            if(i!=j)
            {
                printf("\nIs the edge present between %d & %d(1,0)",i+1,j+1);
                scanf("%d",&m[i][j]);
            }
        }
    }
    printf("\nAdjacency matrix is:\n");
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            printf("%5d",m[i][j]);
        }
        printf("\n");
    }
    printf("\nIndegree,Outdegree & Total degree :");
    for(i=0;i<n;i++)
    {
        for(j=0,ind=0,outd=0;j<n;j++)
        {
            if(m[i][j] == 1)
            outd++;
            if(m[j][i] == 1)
            ind++;
            total=ind+outd;
        }
        printf("\nv%d %5d %5d %5d\n",i+1,ind,outd,total);
    }
 
    printf("\nThe recursive DFS is:\n");
    rdfs(m,n,v);
 
    rbfs(m,n);
 
}



/*
Write a C Program that accepts the vertices and Edges of a graph and store it as an 
adjacency matrix . Implement to traverse the graph Using Breath First Traversal.

*/
// BFS algorithm in C

#include <stdio.h>
#include <stdlib.h>
#define SIZE 40

struct queue {
  int items[SIZE];
  int front;
  int rear;
};

struct queue* createQueue();
void enqueue(struct queue* q, int);
int dequeue(struct queue* q);
void display(struct queue* q);
int isEmpty(struct queue* q);
void printQueue(struct queue* q);

struct node {
  int vertex;
  struct node* next;
};

struct node* createNode(int);

struct Graph {
  int numVertices;
  struct node** adjLists;
  int* visited;
};

// BFS algorithm
void bfs(struct Graph* graph, int startVertex) {
  struct queue* q = createQueue();

  graph->visited[startVertex] = 1;
  enqueue(q, startVertex);

  while (!isEmpty(q)) {
    printQueue(q);
    int currentVertex = dequeue(q);
    printf("Visited %d\n", currentVertex);

    struct node* temp = graph->adjLists[currentVertex];

    while (temp) {
      int adjVertex = temp->vertex;

      if (graph->visited[adjVertex] == 0) {
        graph->visited[adjVertex] = 1;
        enqueue(q, adjVertex);
      }
      temp = temp->next;
    }
  }
}

// Creating a node
struct node* createNode(int v) {
  struct node* newNode = malloc(sizeof(struct node));
  newNode->vertex = v;
  newNode->next = NULL;
  return newNode;
}

// Creating a graph
struct Graph* createGraph(int vertices) {
  struct Graph* graph = malloc(sizeof(struct Graph));
  graph->numVertices = vertices;

  graph->adjLists = malloc(vertices * sizeof(struct node*));
  graph->visited = malloc(vertices * sizeof(int));

  int i;
  for (i = 0; i < vertices; i++) {
    graph->adjLists[i] = NULL;
    graph->visited[i] = 0;
  }

  return graph;
}

// Add edge
void addEdge(struct Graph* graph, int src, int dest) {
  // Add edge from src to dest
  
  struct node* newNode = createNode(dest);
  newNode->next = graph->adjLists[src];
  graph->adjLists[src] = newNode;

  // Add edge from dest to src
  newNode = createNode(src);
  newNode->next = graph->adjLists[dest];
  graph->adjLists[dest] = newNode;
}

// Create a queue
struct queue* createQueue() {
  struct queue* q = malloc(sizeof(struct queue));
  q->front = -1;
  q->rear = -1;
  return q;
}

// Check if the queue is empty
int isEmpty(struct queue* q) {
  if (q->rear == -1)
    return 1;
  else
    return 0;
}

// Adding elements into queue
void enqueue(struct queue* q, int value) {
  if (q->rear == SIZE - 1)
    printf("\nQueue is Full!!");
  else {
    if (q->front == -1)
      q->front = 0;
    q->rear++;
    q->items[q->rear] = value;
  }
}

// Removing elements from queue
int dequeue(struct queue* q) {
  int item;
  if (isEmpty(q)) {
    printf("Queue is empty");
    item = -1;
  } else {
    item = q->items[q->front];
    q->front++;
    if (q->front > q->rear) {
      printf("Resetting queue ");
      q->front = q->rear = -1;
    }
  }
  return item;
}

// Print the queue
void printQueue(struct queue* q) {
  int i = q->front;

  if (isEmpty(q)) {
    printf("Queue is empty");
  } else {
    printf("\nQueue contains \n");
    for (i = q->front; i < q->rear + 1; i++) {
      printf("%d ", q->items[i]);
    }
  }
}

int main() {
  struct Graph* graph = createGraph(6);
  addEdge(graph, 0, 1);
  addEdge(graph, 0, 2);
  addEdge(graph, 1, 2);
  addEdge(graph, 1, 4);
  addEdge(graph, 1, 3);
  addEdge(graph, 2, 4);
  addEdge(graph, 3, 4);

  bfs(graph, 0);

  return 0;
}

