#include<stdio.h>
#include<stdlib.h>

struct tree{


	int data;
	struct tree * left;
	struct tres * root;

}

struct tree *insert(tree*  , int);
void inorder(struct *tree);
void preorder(struct *tree);
void postorder(struct* tree);
struct tree * search(struct tree*);

int main(){

	struct tree *root;
	int choice , item ,  item_no;
	root = NULL;


	do {

		do{

			printf("\n\t 1. Insert in binary tree");
			printf("\n\t 2. Inorder traversal of binary tree");
			printf("\n\t 3. Preoder traversal of binary tree");
		    printf("\n\t 4. Postorder traversal of binary tree");
		    printf("\n\t 5. search and replace");
		    printf("\n\t 6. Exit");
		    printf("\n\t  Enter the choice ");
		    scanf("%d" , &choice);
		    if(choice<1||choice>6){
		    	printf("Invalid Choice -try again");

		    }

		    while(choice<1||choice<6);


		    switch(choice){

		    	case 1 :
		    	  printf("Enter the new element");
		    	  scanf("%d" ,&item);

		    	  root = insert(root, item);

		    	  printf("root is %d" ,root->data);

		    	  break;

		    	 case 2 :
		    	   printf("Iorder traversal of  binary tree is ");
		    	   inorder(root);

		    	   break;

		    	 case 3 :
		    	 	printf("Preorder traversal of binary tree is ");
		    	 	preorder(root);

		    	 	break;

		    	case 4 :
		    		printf("Postorder traversal of binary tree is ");
		    		postorder(root);

		    		break;

		    	case 5 :
		    		printf("Search and Replace opeartion  of binary tree is ");
		    		root = search(root);

		    		break;


		        default :
		        	printf("\n End of  a Program");


		    }


		}

		while(choice!=6);

		return(0);
	}
}

struct tree *  insert(struct tree* root  , int x);
if(!root){

	root = struct( tree*)malloc(sizeof(struct tree));

	root->data = x;
	root ->left = NULL;
	root -> right = NULL;

	return(root);

}

if(root->data>x){
	root->left = insert(root->left , x);
	 else {

	 	root->right = insert(root->right , x);

	 }

	 return(root);

}
void inorder(struct tree*root){
	if(root!=NULL){
		inorder(root->left);
		printf("%d" , root -> data);
		inorder(root -> right);

	}

	return;

}

void preorder(struct tree * root){

	if(root!=NULL){

	    printf("%d" , root->data);
	    preorder(root->left);
	    preorder(root ->right);

	}
	return;
}

void postorder(struct tree * root){

	if(root!=NULL){

		postorder(root ->left);
		postorder(root -> right);
		printf("%d" ,root -> data);

	}

	return ;


}

struct tree * search(struct tree * root){

	int no , i ino;

	struct tree *ptr;

	ptr = root;
	printf("\n Enter the element to be searched :");
	scanf("%d" , &no);

	fflush(stdin);

	while(ptr){
		if(nos>ptr->data){
			 ptr  = ptr->right;

			 else if(no<ptr->data){
			 	ptr = ptr->left;



			 }
			 else{
			 	break;
			 }
			 if(ptr){

			 	printf("\n Element is %d which was searched is found and is = %d" , no , ptr->data);

			 	printf("\n Do you want to replace it  ,press 1 for yes :");
			 	scanf("%d" , &i);

			 	if(i==1){
			 		printf("\n Enter the new Element :");
			 		scanf("%d" , &ino);
			 		ptr->data = ino;
			 	}
			 	else{
			 		printf("\n\t It's Okay");

			 	}
			 	else {
			 		printf("Element %d does not exist in the binary tree " , no);
			 		return (root);
			 		
			 	}
			 }
		}
	}

}

